# Generated by Django 5.2.4 on 2025-09-10 05:33

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import registration.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wa_id', models.CharField(help_text="The user's WhatsApp ID (their phone number).", max_length=50, unique=True)),
                ('name', models.CharField(blank=True, help_text="The user's WhatsApp profile name.", max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_contact_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_names', models.CharField(help_text='The template that triggers this flow. Other templates can be used inside.', max_length=250)),
                ('flow_data', models.JSONField(help_text='The entire JSON object from React Flow (nodes and edges).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='IndividualLabor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('taluka', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=registration.models.photo_upload_path)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='GPS coordinates (longitude, latitude)', null=True, srid=4326)),
                ('location_accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, help_text='When location was captured', null=True)),
                ('category', models.CharField(choices=[('individual_labor', 'Individual Labor'), ('transport', 'Transport'), ('mukkadam', 'Mukkadam'), ('others', 'Others')], max_length=20)),
                ('data_sharing_agreement', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('age', models.PositiveIntegerField()),
                ('primary_source_income', models.CharField(max_length=200)),
                ('skill_pruning', models.BooleanField(default=False)),
                ('skill_harvesting', models.BooleanField(default=False)),
                ('skill_dipping', models.BooleanField(default=False)),
                ('skill_thinning', models.BooleanField(default=False)),
                ('skill_none', models.BooleanField(default=False)),
                ('skill_other', models.CharField(blank=True, max_length=200)),
                ('employment_type', models.CharField(choices=[('daily', 'Daily'), ('seasonal', 'Seasonal'), ('year_around', 'Year Around'), ('other', 'Other')], max_length=20)),
                ('willing_to_migrate', models.CharField(choices=[('migrate_to_company', 'Migrate to Company'), ('migrate_anywhere', 'Migrate Anywhere'), ('travel_day_close_home', 'Travel for the Day Close to Home'), ('other', 'Other')], max_length=30)),
                ('expected_wage', models.DecimalField(decimal_places=2, max_digits=10)),
                ('availability', models.TextField()),
                ('want_training', models.BooleanField(default=False)),
                ('comm_mobile_app', models.BooleanField(default=False)),
                ('comm_whatsapp', models.BooleanField(default=False)),
                ('comm_calling', models.BooleanField(default=False)),
                ('comm_sms', models.BooleanField(default=False)),
                ('comm_other', models.CharField(blank=True, max_length=200)),
                ('adult_men_seeking_employment', models.IntegerField(default=0)),
                ('adult_women_seeking_employment', models.IntegerField(default=0)),
                ('can_refer_others', models.BooleanField(default=False)),
                ('referral_name', models.CharField(blank=True, max_length=200)),
                ('referral_contact', models.CharField(blank=True, max_length=17)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Others',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('taluka', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=registration.models.photo_upload_path)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='GPS coordinates (longitude, latitude)', null=True, srid=4326)),
                ('location_accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, help_text='When location was captured', null=True)),
                ('category', models.CharField(choices=[('individual_labor', 'Individual Labor'), ('transport', 'Transport'), ('mukkadam', 'Mukkadam'), ('others', 'Others')], max_length=20)),
                ('data_sharing_agreement', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_name', models.CharField(max_length=200)),
                ('interested_referrals', models.BooleanField(default=False)),
                ('help_description', models.TextField()),
                ('know_mukadams_labourers', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('taluka', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=registration.models.photo_upload_path)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='GPS coordinates (longitude, latitude)', null=True, srid=4326)),
                ('location_accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, help_text='When location was captured', null=True)),
                ('category', models.CharField(choices=[('individual_labor', 'Individual Labor'), ('transport', 'Transport'), ('mukkadam', 'Mukkadam'), ('others', 'Others')], max_length=20)),
                ('data_sharing_agreement', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vehicle_type', models.CharField(max_length=200)),
                ('people_capacity', models.PositiveIntegerField()),
                ('expected_fair', models.DecimalField(decimal_places=2, max_digits=10)),
                ('availability', models.TextField()),
                ('service_areas', models.TextField()),
                ('home_address', models.CharField(blank=True, max_length=255, null=True)),
                ('whatsapp_number', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WhatsAppLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_number', models.CharField(max_length=20)),
                ('template_name', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=20)),
                ('message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LaboursAdvancedProfiles',
            fields=[
                ('available_from', models.DateField(blank=True, help_text='The start date of their availability period.', null=True)),
                ('available_to', models.DateField(blank=True, help_text='The end date of their availability period.', null=True)),
                ('labour', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='advanced_profile', serialize=False, to='registration.individuallabor')),
                ('available_dates', models.JSONField(blank=True, default=list, help_text='A list of dates in YYYY-MM-DD format.')),
                ('advanced_rate_per_day', models.DecimalField(decimal_places=2, help_text='The per-day rate this labourer has agreed to for advanced bookings.', max_digits=10)),
                ('requires_transport', models.BooleanField(default=True, help_text='Does this labourer require transport to be arranged and paid for?')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('workers_needed', models.PositiveIntegerField()),
                ('duration_days', models.PositiveIntegerField()),
                ('rate_per_day', models.DecimalField(decimal_places=2, max_digits=10)),
                ('required_by_date', models.DateField()),
                ('bidding_deadline', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('waiting_for_response', 'Waiting for Response'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('awaiting_leader_confirmation', 'Awaiting Leader Confirmation'), ('open_for_bidding', 'Open for Bidding')], default='pending', max_length=40)),
                ('competition_level', models.CharField(choices=[('good_chance', 'Good Chance'), ('moderate', 'Moderate'), ('high_competition', 'High Competition')], default='moderate', max_length=20)),
                ('is_urgent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('leader_response_message', models.TextField(blank=True, help_text='Notes or response from the team leader.', null=True)),
                ('leader_quoted_price', models.DecimalField(blank=True, decimal_places=2, help_text='The final price quoted by the leader.', max_digits=10, null=True)),
                ('finalized_leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='finalized_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='registration.job')),
            ],
            options={
                'unique_together': {('job', 'content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='HelpRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('Transport', 'Transport Help'), ('Advance', 'Advance Money'), ('Accommodation', 'Accommodation'), ('Other', 'Other')], max_length=50)),
                ('details', models.TextField(blank=True, help_text="Details if request type is 'Other' or for additional info.")),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_requests', to='registration.jobassignment')),
            ],
        ),
        migrations.CreateModel(
            name='JobBid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('workers_provided', models.PositiveIntegerField(default=0)),
                ('notes_on_skills', models.TextField(blank=True, help_text='Details on the skills of the workers provided.')),
                ('includes_transport', models.BooleanField(default=False)),
                ('includes_accommodation', models.BooleanField(default=False)),
                ('no_advance_required', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('won', 'Won'), ('lost', 'Lost')], default='submitted', max_length=20)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids', to='registration.job')),
                ('registered_labourers', models.ManyToManyField(blank=True, related_name='bids_included_in', to='registration.individuallabor')),
            ],
            options={
                'ordering': ['bid_price'],
            },
        ),
        migrations.CreateModel(
            name='BidReview',
            fields=[
            ],
            options={
                'verbose_name': 'Bid Review',
                'verbose_name_plural': 'Bid Reviews',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('registration.jobbid',),
        ),
        migrations.CreateModel(
            name='JobFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('rating', models.PositiveIntegerField(default=5)),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='registration.job')),
                ('submitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JobLeaderResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('quoted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('available_workers_count', models.PositiveIntegerField(blank=True, null=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registration.job')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('job', 'leader')},
            },
        ),
        migrations.AddField(
            model_name='job',
            name='sent_to_leaders',
            field=models.ManyToManyField(related_name='received_jobs', through='registration.JobLeaderResponse', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wamid', models.CharField(help_text='The unique WhatsApp Message ID from Meta.', max_length=255, unique=True)),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], max_length=10)),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document'), ('sticker', 'Sticker'), ('contact', 'Contact'), ('reaction', 'Reaction'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('is_view_once', models.BooleanField(default=False, help_text='True if this message is a one-time view media.')),
                ('text_content', models.TextField(blank=True, help_text='Content for text messages or placeholders for media.', null=True)),
                ('caption', models.TextField(blank=True, help_text='Caption for media messages.', null=True)),
                ('media_file', models.FileField(blank=True, help_text='Locally saved media file.', max_length=500, null=True, upload_to='whatsapp_media/')),
                ('reaction', models.CharField(blank=True, help_text='Reaction emoji (e.g. 👍, ❤️).', max_length=50, null=True)),
                ('timestamp', models.DateTimeField(help_text='Timestamp from the WhatsApp message.')),
                ('media_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed')], max_length=50, null=True)),
                ('contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('raw_data', models.JSONField(blank=True, help_text='The raw, complete webhook payload from Meta for debugging.', null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='registration.chatcontact')),
                ('replied_to', models.ForeignKey(blank=True, help_text='The message this message is a reply to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='registration.message')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Mukkadam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('taluka', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=registration.models.photo_upload_path)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='GPS coordinates (longitude, latitude)', null=True, srid=4326)),
                ('location_accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, help_text='When location was captured', null=True)),
                ('category', models.CharField(choices=[('individual_labor', 'Individual Labor'), ('transport', 'Transport'), ('mukkadam', 'Mukkadam'), ('others', 'Others')], max_length=20)),
                ('data_sharing_agreement', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('providing_labour_count', models.PositiveIntegerField()),
                ('total_workers_peak', models.PositiveIntegerField()),
                ('skill_pruning', models.BooleanField(default=False)),
                ('skill_harvesting', models.BooleanField(default=False)),
                ('skill_dipping', models.BooleanField(default=False)),
                ('skill_thinning', models.BooleanField(default=False)),
                ('skill_none', models.BooleanField(default=False)),
                ('skill_other', models.CharField(blank=True, max_length=200)),
                ('expected_charges', models.DecimalField(decimal_places=2, max_digits=10)),
                ('labour_supply_availability', models.TextField()),
                ('arrange_transport', models.CharField(choices=[('rented', 'Rented'), ('owned', 'Owned'), ('no', 'No'), ('other', 'Other')], max_length=20)),
                ('transport_other', models.CharField(blank=True, max_length=200)),
                ('provide_tools', models.BooleanField(default=False)),
                ('supply_areas', models.TextField()),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mukadam_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='jobbid',
            name='mukadam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids_made', to='registration.mukkadam'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registration.job')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StatusUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('assigned', 'Assigned to Job'), ('mobilizing', 'Mobilizing'), ('transport_arranged', 'Transport Arranged'), ('en_route', 'En Route to Site'), ('on_site', 'Arrived at Site'), ('work_started', 'Work Started'), ('work_in_progress', 'Work in Progress'), ('work_completed', 'Work Completed'), ('payment_processed', 'Payment Processed')], max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='registration.jobassignment')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='JobLeaderAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocated_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leader_allocations', to='registration.job')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_allocations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('job', 'leader')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='jobbid',
            unique_together={('job', 'mukadam')},
        ),
        migrations.CreateModel(
            name='RegisteredLabourer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('mobile_number', models.CharField(blank=True, max_length=15)),
                ('mukkadam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registered_labourers', to='registration.mukkadam')),
            ],
            options={
                'unique_together': {('mukkadam', 'name')},
            },
        ),
        migrations.CreateModel(
            name='WorkerStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('availability_status', models.CharField(choices=[('available', 'Available'), ('booked', 'Booked'), ('proposed', 'Proposed for a Job'), ('not_available', 'Not Available')], default='available', max_length=15)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('current_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registration.job')),
                ('proposed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposed_workers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('content_type', 'object_id')},
            },
        ),
    ]
