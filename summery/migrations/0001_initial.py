# Generated by Django 5.2.4 on 2025-10-17 08:16

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.CharField(choices=[('INVENTORY', 'Inventory'), ('ORDERS', 'Orders'), ('TASKS', 'Tasks'), ('FINANCIAL', 'Financial'), ('ENGAGEMENT', 'Engagement'), ('PERFORMANCE', 'Performance'), ('SYSTEM', 'System'), ('ANOMALY', 'Anomaly')], max_length=50)),
                ('severity', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low'), ('INFO', 'Info')], max_length=20)),
                ('metric_type', models.CharField(max_length=100)),
                ('condition_operator', models.CharField(choices=[('GT', 'Greater Than'), ('LT', 'Less Than'), ('EQ', 'Equal To'), ('GTE', 'Greater Than or Equal'), ('LTE', 'Less Than or Equal'), ('CHANGE_GT', 'Change Greater Than'), ('CHANGE_LT', 'Change Less Than')], max_length=20)),
                ('threshold_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('check_interval_hours', models.IntegerField(default=24)),
                ('last_checked_at', models.DateTimeField(blank=True, null=True)),
                ('title_template', models.CharField(max_length=255)),
                ('description_template', models.TextField()),
                ('auto_resolve_after_hours', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Alert Rule',
                'verbose_name_plural': 'Alert Rules',
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BenchmarkComparison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_name', models.CharField(max_length=100)),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.CharField(max_length=100)),
                ('entity_name', models.CharField(max_length=255)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('actual_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('benchmark_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('difference', models.DecimalField(decimal_places=2, max_digits=15)),
                ('difference_percentage', models.DecimalField(decimal_places=2, max_digits=7)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('total_entities', models.IntegerField(blank=True, null=True)),
                ('percentile', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_above_benchmark', models.BooleanField(default=False)),
                ('performance_tier', models.CharField(blank=True, choices=[('TOP', 'Top Performer'), ('ABOVE_AVG', 'Above Average'), ('AVERAGE', 'Average'), ('BELOW_AVG', 'Below Average'), ('POOR', 'Needs Improvement')], max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Benchmark Comparison',
                'verbose_name_plural': 'Benchmark Comparisons',
                'ordering': ['-period_end', 'metric_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DailySummary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(db_index=True, unique=True)),
                ('total_orders', models.IntegerField(default=0)),
                ('orders_pending', models.IntegerField(default=0)),
                ('orders_completed', models.IntegerField(default=0)),
                ('orders_cancelled', models.IntegerField(default=0)),
                ('order_completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_payments_collected', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('pending_payments', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('low_stock_items', models.IntegerField(default=0)),
                ('out_of_stock_items', models.IntegerField(default=0)),
                ('total_products', models.IntegerField(default=0)),
                ('inventory_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('tasks_overdue', models.IntegerField(default=0)),
                ('tasks_pending', models.IntegerField(default=0)),
                ('task_completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('active_farmers', models.IntegerField(default=0)),
                ('active_crop_cycles', models.IntegerField(default=0)),
                ('new_farmers', models.IntegerField(default=0)),
                ('total_messages_sent', models.IntegerField(default=0)),
                ('total_messages_received', models.IntegerField(default=0)),
                ('flow_completions', models.IntegerField(default=0)),
                ('flow_dropoffs', models.IntegerField(default=0)),
                ('call_volume', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Daily Summary',
                'verbose_name_plural': 'Daily Summaries',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GrowthMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_name', models.CharField(max_length=100)),
                ('period_type', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly')], max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('start_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('end_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('growth_rate', models.DecimalField(decimal_places=2, max_digits=7)),
                ('growth_absolute', models.DecimalField(decimal_places=2, max_digits=15)),
                ('previous_period_growth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('is_positive_growth', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Growth Metric',
                'verbose_name_plural': 'Growth Metrics',
                'ordering': ['-period_end'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrendAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_name', models.CharField(max_length=100)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('trend_direction', models.CharField(choices=[('UP', 'Upward'), ('DOWN', 'Downward'), ('STABLE', 'Stable'), ('VOLATILE', 'Volatile')], max_length=20)),
                ('trend_strength', models.DecimalField(decimal_places=2, max_digits=5)),
                ('average_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('volatility', models.DecimalField(decimal_places=2, max_digits=7)),
                ('forecasted_next_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('forecast_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('insights', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Trend Analysis',
                'verbose_name_plural': 'Trend Analyses',
                'ordering': ['-period_end'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low'), ('INFO', 'Info')], db_index=True, max_length=20)),
                ('category', models.CharField(choices=[('INVENTORY', 'Inventory'), ('ORDERS', 'Orders'), ('TASKS', 'Tasks'), ('FINANCIAL', 'Financial'), ('ENGAGEMENT', 'Engagement'), ('PERFORMANCE', 'Performance'), ('SYSTEM', 'System'), ('ANOMALY', 'Anomaly')], db_index=True, max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('ACKNOWLEDGED', 'Acknowledged'), ('RESOLVED', 'Resolved'), ('DISMISSED', 'Dismissed')], db_index=True, default='ACTIVE', max_length=20)),
                ('entity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('entity_id', models.CharField(blank=True, max_length=100, null=True)),
                ('entity_name', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('current_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('previous_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('auto_resolve', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='summary_acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='summary_resolved_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('anomaly_type', models.CharField(choices=[('SUDDEN_SPIKE', 'Sudden Spike'), ('SUDDEN_DROP', 'Sudden Drop'), ('UNUSUAL_PATTERN', 'Unusual Pattern'), ('TREND_BREAK', 'Trend Break'), ('OUTLIER', 'Outlier')], max_length=50)),
                ('metric_name', models.CharField(max_length=100)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('expected_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('actual_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('deviation_percentage', models.DecimalField(decimal_places=2, max_digits=7)),
                ('entity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('entity_id', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('possible_causes', models.TextField(blank=True, null=True)),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly', to='summery.alert')),
            ],
            options={
                'verbose_name': 'Anomaly Detection',
                'verbose_name_plural': 'Anomaly Detections',
                'ordering': ['-detected_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeographicPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('district', models.CharField(max_length=100)),
                ('taluka', models.CharField(blank=True, max_length=100, null=True)),
                ('village', models.CharField(blank=True, max_length=100, null=True)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('total_farmers', models.IntegerField(default=0)),
                ('total_orders', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('active_farmers_count', models.IntegerField(default=0)),
                ('task_completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('cancelled_orders', models.IntegerField(default=0)),
                ('overdue_tasks', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Geographic Performance',
                'verbose_name_plural': 'Geographic Performance',
                'ordering': ['-period_end', 'district'],
                'abstract': False,
                'indexes': [models.Index(fields=['district', 'period_end'], name='summery_geo_distric_a656e8_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_type', models.CharField(choices=[('ORDER_FULFILLMENT', 'Order Fulfillment Time'), ('PAYMENT_COLLECTION', 'Payment Collection Rate'), ('TASK_COMPLETION', 'Task Completion Rate'), ('FARMER_ENGAGEMENT', 'Farmer Engagement'), ('INVENTORY_TURNOVER', 'Inventory Turnover'), ('RESPONSE_TIME', 'Response Time'), ('FLOW_COMPLETION', 'Flow Completion Rate')], max_length=50)),
                ('date', models.DateField(db_index=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('entity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('entity_id', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'ordering': ['-date', 'metric_type'],
                'abstract': False,
                'indexes': [models.Index(fields=['metric_type', 'date'], name='summery_per_metric__ed7b85_idx'), models.Index(fields=['entity_type', 'date'], name='summery_per_entity__4677ae_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['severity', 'status'], name='summery_ale_severit_fdd1f6_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['category', 'status'], name='summery_ale_categor_fecc9d_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['entity_type', 'entity_id'], name='summery_ale_entity__93379a_idx'),
        ),
    ]
